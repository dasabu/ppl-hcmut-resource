# Generated from /Users/duyanhle/Desktop/assignment1/src/main/bkool/parser/BKOOL.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,62,463,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
        1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
        1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,
        1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,5,52,336,
        8,52,10,52,12,52,339,9,52,1,53,4,53,342,8,53,11,53,12,53,343,1,53,
        1,53,1,54,1,54,5,54,350,8,54,10,54,12,54,353,9,54,1,54,1,54,1,55,
        1,55,1,55,1,55,5,55,361,8,55,10,55,12,55,364,9,55,1,55,1,55,1,55,
        1,55,1,55,1,56,1,56,5,56,373,8,56,10,56,12,56,376,9,56,1,56,3,56,
        379,8,56,1,57,1,57,1,57,1,57,1,57,3,57,386,8,57,1,57,1,57,3,57,390,
        8,57,1,58,4,58,393,8,58,11,58,12,58,394,1,59,1,59,5,59,399,8,59,
        10,59,12,59,402,9,59,1,60,1,60,3,60,406,8,60,1,60,4,60,409,8,60,
        11,60,12,60,410,1,61,1,61,5,61,415,8,61,10,61,12,61,418,9,61,1,61,
        3,61,421,8,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,430,8,62,1,
        63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,5,65,440,8,65,10,65,12,65,
        443,9,65,1,65,1,65,3,65,447,8,65,1,65,1,65,1,66,1,66,5,66,453,8,
        66,10,66,12,66,456,9,66,1,66,1,66,1,66,1,67,1,67,1,67,1,362,0,68,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,
        113,57,115,58,117,0,119,0,121,0,123,59,125,0,127,0,129,0,131,60,
        133,61,135,62,1,0,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,3,0,9,10,12,13,32,32,2,0,10,10,13,13,1,0,49,57,1,0,48,57,
        1,0,48,48,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,34,34,
        92,92,7,0,34,34,92,92,98,98,102,102,110,110,114,114,116,116,4,0,
        10,10,13,13,69,70,79,79,1,0,34,34,475,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
        1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
        1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
        0,0,0,115,1,0,0,0,0,123,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,
        1,0,0,0,1,137,1,0,0,0,3,145,1,0,0,0,5,151,1,0,0,0,7,157,1,0,0,0,
        9,166,1,0,0,0,11,169,1,0,0,0,13,174,1,0,0,0,15,182,1,0,0,0,17,188,
        1,0,0,0,19,191,1,0,0,0,21,195,1,0,0,0,23,199,1,0,0,0,25,206,1,0,
        0,0,27,211,1,0,0,0,29,215,1,0,0,0,31,222,1,0,0,0,33,227,1,0,0,0,
        35,233,1,0,0,0,37,238,1,0,0,0,39,242,1,0,0,0,41,247,1,0,0,0,43,253,
        1,0,0,0,45,260,1,0,0,0,47,263,1,0,0,0,49,270,1,0,0,0,51,272,1,0,
        0,0,53,274,1,0,0,0,55,276,1,0,0,0,57,278,1,0,0,0,59,280,1,0,0,0,
        61,282,1,0,0,0,63,285,1,0,0,0,65,288,1,0,0,0,67,290,1,0,0,0,69,292,
        1,0,0,0,71,295,1,0,0,0,73,298,1,0,0,0,75,301,1,0,0,0,77,304,1,0,
        0,0,79,306,1,0,0,0,81,308,1,0,0,0,83,311,1,0,0,0,85,313,1,0,0,0,
        87,315,1,0,0,0,89,317,1,0,0,0,91,319,1,0,0,0,93,321,1,0,0,0,95,323,
        1,0,0,0,97,325,1,0,0,0,99,327,1,0,0,0,101,329,1,0,0,0,103,331,1,
        0,0,0,105,333,1,0,0,0,107,341,1,0,0,0,109,347,1,0,0,0,111,356,1,
        0,0,0,113,378,1,0,0,0,115,389,1,0,0,0,117,392,1,0,0,0,119,396,1,
        0,0,0,121,403,1,0,0,0,123,412,1,0,0,0,125,429,1,0,0,0,127,431,1,
        0,0,0,129,434,1,0,0,0,131,437,1,0,0,0,133,450,1,0,0,0,135,460,1,
        0,0,0,137,138,5,98,0,0,138,139,5,111,0,0,139,140,5,111,0,0,140,141,
        5,108,0,0,141,142,5,101,0,0,142,143,5,97,0,0,143,144,5,110,0,0,144,
        2,1,0,0,0,145,146,5,98,0,0,146,147,5,114,0,0,147,148,5,101,0,0,148,
        149,5,97,0,0,149,150,5,107,0,0,150,4,1,0,0,0,151,152,5,99,0,0,152,
        153,5,108,0,0,153,154,5,97,0,0,154,155,5,115,0,0,155,156,5,115,0,
        0,156,6,1,0,0,0,157,158,5,99,0,0,158,159,5,111,0,0,159,160,5,110,
        0,0,160,161,5,116,0,0,161,162,5,105,0,0,162,163,5,110,0,0,163,164,
        5,117,0,0,164,165,5,101,0,0,165,8,1,0,0,0,166,167,5,100,0,0,167,
        168,5,111,0,0,168,10,1,0,0,0,169,170,5,101,0,0,170,171,5,108,0,0,
        171,172,5,115,0,0,172,173,5,101,0,0,173,12,1,0,0,0,174,175,5,101,
        0,0,175,176,5,120,0,0,176,177,5,116,0,0,177,178,5,101,0,0,178,179,
        5,110,0,0,179,180,5,100,0,0,180,181,5,115,0,0,181,14,1,0,0,0,182,
        183,5,102,0,0,183,184,5,108,0,0,184,185,5,111,0,0,185,186,5,97,0,
        0,186,187,5,116,0,0,187,16,1,0,0,0,188,189,5,105,0,0,189,190,5,102,
        0,0,190,18,1,0,0,0,191,192,5,105,0,0,192,193,5,110,0,0,193,194,5,
        116,0,0,194,20,1,0,0,0,195,196,5,110,0,0,196,197,5,101,0,0,197,198,
        5,119,0,0,198,22,1,0,0,0,199,200,5,115,0,0,200,201,5,116,0,0,201,
        202,5,114,0,0,202,203,5,105,0,0,203,204,5,110,0,0,204,205,5,103,
        0,0,205,24,1,0,0,0,206,207,5,116,0,0,207,208,5,104,0,0,208,209,5,
        101,0,0,209,210,5,110,0,0,210,26,1,0,0,0,211,212,5,102,0,0,212,213,
        5,111,0,0,213,214,5,114,0,0,214,28,1,0,0,0,215,216,5,114,0,0,216,
        217,5,101,0,0,217,218,5,116,0,0,218,219,5,117,0,0,219,220,5,114,
        0,0,220,221,5,110,0,0,221,30,1,0,0,0,222,223,5,116,0,0,223,224,5,
        114,0,0,224,225,5,117,0,0,225,226,5,101,0,0,226,32,1,0,0,0,227,228,
        5,102,0,0,228,229,5,97,0,0,229,230,5,108,0,0,230,231,5,115,0,0,231,
        232,5,101,0,0,232,34,1,0,0,0,233,234,5,118,0,0,234,235,5,111,0,0,
        235,236,5,105,0,0,236,237,5,100,0,0,237,36,1,0,0,0,238,239,5,110,
        0,0,239,240,5,105,0,0,240,241,5,108,0,0,241,38,1,0,0,0,242,243,5,
        116,0,0,243,244,5,104,0,0,244,245,5,105,0,0,245,246,5,115,0,0,246,
        40,1,0,0,0,247,248,5,102,0,0,248,249,5,105,0,0,249,250,5,110,0,0,
        250,251,5,97,0,0,251,252,5,108,0,0,252,42,1,0,0,0,253,254,5,115,
        0,0,254,255,5,116,0,0,255,256,5,97,0,0,256,257,5,116,0,0,257,258,
        5,105,0,0,258,259,5,99,0,0,259,44,1,0,0,0,260,261,5,116,0,0,261,
        262,5,111,0,0,262,46,1,0,0,0,263,264,5,100,0,0,264,265,5,111,0,0,
        265,266,5,119,0,0,266,267,5,110,0,0,267,268,5,116,0,0,268,269,5,
        111,0,0,269,48,1,0,0,0,270,271,5,43,0,0,271,50,1,0,0,0,272,273,5,
        45,0,0,273,52,1,0,0,0,274,275,5,42,0,0,275,54,1,0,0,0,276,277,5,
        47,0,0,277,56,1,0,0,0,278,279,5,92,0,0,279,58,1,0,0,0,280,281,5,
        37,0,0,281,60,1,0,0,0,282,283,5,61,0,0,283,284,5,61,0,0,284,62,1,
        0,0,0,285,286,5,33,0,0,286,287,5,61,0,0,287,64,1,0,0,0,288,289,5,
        60,0,0,289,66,1,0,0,0,290,291,5,62,0,0,291,68,1,0,0,0,292,293,5,
        60,0,0,293,294,5,61,0,0,294,70,1,0,0,0,295,296,5,62,0,0,296,297,
        5,61,0,0,297,72,1,0,0,0,298,299,5,124,0,0,299,300,5,124,0,0,300,
        74,1,0,0,0,301,302,5,38,0,0,302,303,5,38,0,0,303,76,1,0,0,0,304,
        305,5,33,0,0,305,78,1,0,0,0,306,307,5,94,0,0,307,80,1,0,0,0,308,
        309,5,58,0,0,309,310,5,61,0,0,310,82,1,0,0,0,311,312,5,61,0,0,312,
        84,1,0,0,0,313,314,5,91,0,0,314,86,1,0,0,0,315,316,5,93,0,0,316,
        88,1,0,0,0,317,318,5,123,0,0,318,90,1,0,0,0,319,320,5,125,0,0,320,
        92,1,0,0,0,321,322,5,40,0,0,322,94,1,0,0,0,323,324,5,41,0,0,324,
        96,1,0,0,0,325,326,5,59,0,0,326,98,1,0,0,0,327,328,5,58,0,0,328,
        100,1,0,0,0,329,330,5,46,0,0,330,102,1,0,0,0,331,332,5,44,0,0,332,
        104,1,0,0,0,333,337,7,0,0,0,334,336,7,1,0,0,335,334,1,0,0,0,336,
        339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,106,1,0,0,0,339,
        337,1,0,0,0,340,342,7,2,0,0,341,340,1,0,0,0,342,343,1,0,0,0,343,
        341,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,6,53,0,0,346,
        108,1,0,0,0,347,351,5,35,0,0,348,350,8,3,0,0,349,348,1,0,0,0,350,
        353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,
        351,1,0,0,0,354,355,6,54,0,0,355,110,1,0,0,0,356,357,5,47,0,0,357,
        358,5,42,0,0,358,362,1,0,0,0,359,361,9,0,0,0,360,359,1,0,0,0,361,
        364,1,0,0,0,362,363,1,0,0,0,362,360,1,0,0,0,363,365,1,0,0,0,364,
        362,1,0,0,0,365,366,5,42,0,0,366,367,5,47,0,0,367,368,1,0,0,0,368,
        369,6,55,0,0,369,112,1,0,0,0,370,374,7,4,0,0,371,373,7,5,0,0,372,
        371,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,
        379,1,0,0,0,376,374,1,0,0,0,377,379,7,6,0,0,378,370,1,0,0,0,378,
        377,1,0,0,0,379,114,1,0,0,0,380,381,3,117,58,0,381,382,3,119,59,
        0,382,390,1,0,0,0,383,385,3,117,58,0,384,386,3,119,59,0,385,384,
        1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,3,121,60,0,388,390,
        1,0,0,0,389,380,1,0,0,0,389,383,1,0,0,0,390,116,1,0,0,0,391,393,
        7,5,0,0,392,391,1,0,0,0,393,394,1,0,0,0,394,392,1,0,0,0,394,395,
        1,0,0,0,395,118,1,0,0,0,396,400,5,46,0,0,397,399,7,5,0,0,398,397,
        1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,120,
        1,0,0,0,402,400,1,0,0,0,403,405,7,7,0,0,404,406,7,8,0,0,405,404,
        1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,409,7,5,0,0,408,407,
        1,0,0,0,409,410,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,122,
        1,0,0,0,412,416,5,34,0,0,413,415,3,125,62,0,414,413,1,0,0,0,415,
        418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,420,1,0,0,0,418,
        416,1,0,0,0,419,421,3,123,61,0,420,419,1,0,0,0,420,421,1,0,0,0,421,
        422,1,0,0,0,422,423,5,34,0,0,423,424,6,61,1,0,424,124,1,0,0,0,425,
        430,3,127,63,0,426,427,5,92,0,0,427,430,5,34,0,0,428,430,8,9,0,0,
        429,425,1,0,0,0,429,426,1,0,0,0,429,428,1,0,0,0,430,126,1,0,0,0,
        431,432,5,92,0,0,432,433,7,10,0,0,433,128,1,0,0,0,434,435,5,92,0,
        0,435,436,8,10,0,0,436,130,1,0,0,0,437,441,5,34,0,0,438,440,3,125,
        62,0,439,438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,
        0,0,442,446,1,0,0,0,443,441,1,0,0,0,444,447,7,11,0,0,445,447,8,12,
        0,0,446,444,1,0,0,0,446,445,1,0,0,0,447,448,1,0,0,0,448,449,6,65,
        2,0,449,132,1,0,0,0,450,454,5,34,0,0,451,453,3,125,62,0,452,451,
        1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,457,
        1,0,0,0,456,454,1,0,0,0,457,458,3,129,64,0,458,459,6,66,3,0,459,
        134,1,0,0,0,460,461,9,0,0,0,461,462,6,67,4,0,462,136,1,0,0,0,19,
        0,337,343,351,362,374,378,385,389,394,400,405,410,416,420,429,441,
        446,454,5,6,0,0,1,61,0,1,65,1,1,66,2,1,67,3
    ]

class BKOOLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOLEAN = 1
    BREAK = 2
    CLASS = 3
    CONTINUE = 4
    DO = 5
    ELSE = 6
    EXTENDS = 7
    FLOAT = 8
    IF = 9
    INT = 10
    NEW = 11
    STRING = 12
    THEN = 13
    FOR = 14
    RETURN = 15
    TRUE = 16
    FALSE = 17
    VOID = 18
    NIL = 19
    THIS = 20
    FINAL = 21
    STATIC = 22
    TO = 23
    DOWNTO = 24
    ADD_OP = 25
    SUB_OP = 26
    MUL_OP = 27
    FLODIV_OP = 28
    INTDIV_OP = 29
    MOD_OP = 30
    EQUAL_OP = 31
    NEQUAL_OP = 32
    LT_OP = 33
    GT_OP = 34
    LTE_OP = 35
    GTE_OP = 36
    OR_OP = 37
    AND_OP = 38
    NOT_OP = 39
    CONCAT_OP = 40
    ASSIGN_OP = 41
    EQUAL_SIGN = 42
    LSB = 43
    RSB = 44
    LP = 45
    RP = 46
    LB = 47
    RB = 48
    SEMI = 49
    COLON = 50
    DOT = 51
    COMMA = 52
    ID = 53
    WS = 54
    LINE_COMMENT = 55
    BLOCK_COMMENT = 56
    INTLIT = 57
    FLOATLIT = 58
    STRINGLIT = 59
    UNCLOSE_STRING = 60
    ILLEGAL_ESCAPE = 61
    ERROR_CHAR = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'boolean'", "'break'", "'class'", "'continue'", "'do'", "'else'", 
            "'extends'", "'float'", "'if'", "'int'", "'new'", "'string'", 
            "'then'", "'for'", "'return'", "'true'", "'false'", "'void'", 
            "'nil'", "'this'", "'final'", "'static'", "'to'", "'downto'", 
            "'+'", "'-'", "'*'", "'/'", "'\\'", "'%'", "'=='", "'!='", "'<'", 
            "'>'", "'<='", "'>='", "'||'", "'&&'", "'!'", "'^'", "':='", 
            "'='", "'['", "']'", "'{'", "'}'", "'('", "')'", "';'", "':'", 
            "'.'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BOOLEAN", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", "EXTENDS", 
            "FLOAT", "IF", "INT", "NEW", "STRING", "THEN", "FOR", "RETURN", 
            "TRUE", "FALSE", "VOID", "NIL", "THIS", "FINAL", "STATIC", "TO", 
            "DOWNTO", "ADD_OP", "SUB_OP", "MUL_OP", "FLODIV_OP", "INTDIV_OP", 
            "MOD_OP", "EQUAL_OP", "NEQUAL_OP", "LT_OP", "GT_OP", "LTE_OP", 
            "GTE_OP", "OR_OP", "AND_OP", "NOT_OP", "CONCAT_OP", "ASSIGN_OP", 
            "EQUAL_SIGN", "LSB", "RSB", "LP", "RP", "LB", "RB", "SEMI", 
            "COLON", "DOT", "COMMA", "ID", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
            "INTLIT", "FLOATLIT", "STRINGLIT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_CHAR" ]

    ruleNames = [ "BOOLEAN", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", 
                  "EXTENDS", "FLOAT", "IF", "INT", "NEW", "STRING", "THEN", 
                  "FOR", "RETURN", "TRUE", "FALSE", "VOID", "NIL", "THIS", 
                  "FINAL", "STATIC", "TO", "DOWNTO", "ADD_OP", "SUB_OP", 
                  "MUL_OP", "FLODIV_OP", "INTDIV_OP", "MOD_OP", "EQUAL_OP", 
                  "NEQUAL_OP", "LT_OP", "GT_OP", "LTE_OP", "GTE_OP", "OR_OP", 
                  "AND_OP", "NOT_OP", "CONCAT_OP", "ASSIGN_OP", "EQUAL_SIGN", 
                  "LSB", "RSB", "LP", "RP", "LB", "RB", "SEMI", "COLON", 
                  "DOT", "COMMA", "ID", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
                  "INTLIT", "FLOATLIT", "INTPART", "DECPART", "EXPPART", 
                  "STRINGLIT", "CHARLIT", "ESCSEQ", "ILLESC", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "BKOOL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.STRINGLIT_action 
            actions[65] = self.UNCLOSE_STRING_action 
            actions[66] = self.ILLEGAL_ESCAPE_action 
            actions[67] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.text = self.text[1:-1] 
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            	if self.text[-1] in ['\n', '\r', 'EOF']:
            		raise UncloseString(self.text[1:-1])
            	else:
            		raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	raise IllegalEscape(self.text[1:])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             raise ErrorToken(self.text) 
     


